buildscript {
    repositories {
        maven {
            name = "forge"
            url = 'https://files.minecraftforge.net/maven' }
        maven {
            name = "curseforge"
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: 'maven-publish'

if (System.getenv('VERSION') != null) {
    version = System.getenv('VERSION')
} else {
    version = "${mc_version}-${mod_version}"
}

group = "com.github.klikli_dev"
archivesBaseName = "occultism"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8 // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20200404-1.15.1'

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            args += "--username=Occultism"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                occultism {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                occultism {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            args '--mod', 'occultism', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                occultism {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "Hwyla/Waila Maven"
        url = "http://tehnut.info/maven"
    }
    maven {
        name = "Patchouli Maven"
        url = 'https://maven.blamejared.com'
    }
//    maven {
//        name = "Progwm16 maven - JEI"
//        url = 'https://dvs1.progwml6.com/files/maven'
//    }
    maven {
        name = "ModMaven - JEI"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.15.2-31.1.37'
    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")
    compile fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")
    //compile fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")
    //Note: Enable hwyla leads to build errors on github actions, even when just including the runtime version.
    //compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
    //runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "occultism",
            "Specification-Vendor": "Kli Kli",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Kli Kli",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

// Process resources on build
processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version':project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

curseforge {
    def curse_api_key = System.getenv('CURSEFORGE_API_KEY')
    if (curse_api_key == null) {
        println 'No API Key for Curseforge found.'
        curse_api_key = ''
        return
    }

    def release_type = System.getenv("RELEASE_TYPE")
    if(release_type == null){
        println "No release type, no upload to Curseforge."
        return
    }
    if(release_type == "test"){
        println "Release type test, no upload to Curseforge."
        return
    }
    def env_mc_version = System.getenv("MC_VERSION")
    if(env_mc_version == null){
        println "No mc version found, assuming ${mc_version}"
        env_mc_version = "${mc_version}"
        return
    }

    project {
        apiKey = curse_api_key
        id = '361026'
        changelog = '[Automated Build]\nFind changes at https://github.com/klikli-dev/occultism'
        releaseType = release_type
        addGameVersion env_mc_version
    }
    options {
        javaVersionAutoDetect = false
    }
}